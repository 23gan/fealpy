import numpy as np

init_mesh_data = [
    {
        "node": np.array([[0, 0], [1, 0], [1, 1], [0, 1]], dtype=np.float64),
        "edge": np.array([[0, 1], [1, 2], [2, 3], [3, 0]], dtype=np.int32),
        "cell": np.array([[0, 1, 2, 3]], dtype=np.int32),
        "NN": 4,
        "NE": 4,
        "NF": 4,
        "NC": 1,
    }, ]
entity_data = [
    {
        "entity_measure": (np.array([0.0], dtype=np.float64),
                           np.array([1.0, 1.0, 1.0, 1.0], dtype=np.float64),
                           np.array([1.0], dtype=np.float64)),
        "bcs": (np.array([[0.78867513, 0.21132487], [0.21132487, 0.78867513]], dtype=np.float64),
                np.array([[0.78867513, 0.21132487], [0.21132487, 0.78867513]], dtype=np.float64)),
        "ws": np.array([0.25, 0.25, 0.25, 0.25], dtype=np.float64),
        "point": np.array([[[0.21132487, 0.21132487]],
                            [[0.21132487, 0.78867513]],
                            [[0.78867513, 0.21132487]],
                            [[0.78867513, 0.78867513]]], dtype=np.float64),
    }, ]
geo_data = [
    {
        "edge_frame": (np.array([[0., -1.], [-1., 0.], [1., 0.], [0., 1.]], dtype=np.float64),
                       np.array([[1., 0.], [0., -1.], [0., 1.], [-1., 0.]], dtype=np.float64)),
        "edge_unit_normal": np.array([[0., -1.], [-1., 0.], [1., 0.], [0., 1.]], dtype=np.float64),
    }, ]
cal_data = [
    {
        "shape_function": np.array([[0.62200847, 0.16666667, 0.16666667, 0.0446582],
                                     [0.16666667, 0.62200847, 0.0446582, 0.16666667],
                                     [0.16666667, 0.0446582, 0.62200847, 0.16666667],
                                     [0.0446582, 0.16666667, 0.16666667, 0.62200847]],
                                    dtype=np.float64),
        "grad_shape_function": np.array(
            [[[[-0.78867513, -0.78867513], [-0.21132487, 0.78867513], [0.78867513, -0.21132487],
               [0.21132487, 0.21132487]]],
             [[[-0.21132487, -0.78867513], [-0.78867513, 0.78867513], [0.21132487, -0.21132487],
               [0.78867513, 0.21132487]]],
             [[[-0.78867513, -0.21132487], [-0.21132487, 0.21132487], [0.78867513, -0.78867513],
               [0.21132487, 0.78867513]]],
             [[[-0.21132487, -0.21132487], [-0.78867513, 0.21132487], [0.21132487, -0.78867513],
               [0.78867513, 0.78867513]]]],
            dtype=np.float64),
        "grad_shape_function_x": np.array(
            [[[[-0.78867513, - 0.78867513], [-0.21132487, 0.78867513], [0.78867513, - 0.21132487],
               [0.21132487, 0.21132487]]],
             [[[-0.21132487, - 0.78867513], [-0.78867513, 0.78867513], [0.21132487, -0.21132487],
               [0.78867513, 0.21132487]]],
             [[[-0.78867513, - 0.21132487], [-0.21132487, 0.21132487], [0.78867513, - 0.78867513],
               [0.21132487, 0.78867513]]],
             [[[-0.21132487, - 0.21132487], [-0.78867513, 0.21132487], [0.21132487, - 0.78867513],
               [0.78867513, 0.78867513]]]],
            dtype=np.float64),
        "jacobi_matrix": np.array(
            [[[[1., 0.], [0., 1.]]],
             [[[1., 0.], [0., 1.]]],
             [[[1., 0.], [0., 1.]]],
             [[[1., 0.], [0., 1.]]]],
            dtype=np.float64),
        "first_fundamental_form": np.array(
            [[[[1., 0.], [0., 1.]]],
             [[[1., 0.], [0., 1.]]],
             [[[1., 0.], [0., 1.]]],
             [[[1., 0.], [0., 1.]]]],
            dtype=np.float64),
    }, ]
