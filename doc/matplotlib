# matplotlib study note

Everything in matplotlib is organized in a hierarchy

* state-machine environment, matplotlib.pyplot
* the first level of the object-oriented interface
* Parts of a Figure
    + Figure: The figure keeps track of all the child Axes
        - artists: titles, figure legends, 
        - canvas: 画布 
    + Axes: 
        - the region of the image with the data space
        - can only be in one figure
        - contains two or three axis
        - title
        - x-label
        - y-label
        - the Axes class and it's memeber functions are the primary entry point
          to working with the OO interface
    + Axis: the number-line-like objects
        - setting the graph limits
        - generating the ticks and ticklabels
        - Locator: determine the location of the ticks
        - Formatter: formate the ticklabel strings
    + Artist: everything you can see on the figure is an artist
        - figure, axes, axis objects
        - Text objects
        - Line 2D
        - collection objects 
        - patch objects
        - when the figure is rendered, all of the artists are drawn to the
          canvas
        - most artists are tied to an Axes, so can not shared by multiple Axes,
          or moved from one to another

## Types of inputs to plotting functions


* np.array is the objects can work well with matplotlib
* other data formate should convert to np.array

## Matplotlib, pyplot, pylab

* Matplotlig is the whole package
* matplotlib.pyplot is a module in matplotlib
* pylab is a module that gets installed alongside matplotlib

* Pyplot provides the state-machine interface to the underlying
* objects-oriented plotting library

* current axes
* pylab is a convenience module that bulk imports matplotlib.pyplot and numpy
* in a single name space
* OO interface for plotting
* pros and cons
* pyplot style
    ```
    import matplotlib.pyplot as plt
    import numpy as np
    ```

## What is a backend?

To support all of these use cases, matplotlib can target different outputs, and
each of these capabilities is called a backend

The "frontend is the user facing code, i.e., the plotting code,  whereas the
"backend" does all the hard work behind-thescenes to make the figure. 

* interactive backends
* hardcopy backends to make image files, non-interactive backends

* render: the thing that actually does the drawing
* canvas: the place where the drawing goes

* vector renderer
* raster renderer
