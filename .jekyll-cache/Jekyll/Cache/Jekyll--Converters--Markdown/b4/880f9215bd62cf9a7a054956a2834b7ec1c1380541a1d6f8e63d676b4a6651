I"$:<p>本文简单介绍 linux 下 doxygen 的安装和注释规则.</p>

<h2 id="简介">简介</h2>

<p>doxygen 是一个程序化生成代码文档的工具, 适用于 <code class="language-plaintext highlighter-rouge">C++</code>, <code class="language-plaintext highlighter-rouge">Python</code> 等语言.
按照 doxygen 的格式给程序写注释, 就可以通过 doxygen 处理为详细的代码文档.</p>

<h2 id="安装">安装</h2>

<p>linux</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>graphviz
<span class="nb">sudo </span>apt <span class="nb">install </span>doxygen
</code></pre></div></div>

<h2 id="doxygen-注释规则">doxygen 注释规则</h2>

<p>Doxygen 只会处理符合规则的注释.</p>

<h3 id="注释规则">注释规则</h3>

<ul>
  <li>多行注释
    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cm">/** 注释内容
   *
   */</span>
</code></pre></div>    </div>
  </li>
  <li>单行注释
    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cm">/** 注释内容 */</span>
</code></pre></div>    </div>
    <p><strong>注意:</strong> Doxygen 默认注释是说明下面的代码, 如:</p>
    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cm">/**  两个整数相加
   *
   */</span>
  <span class="kt">int</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span>
  <span class="p">{</span>
      <span class="k">return</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">;</span>
  <span class="p">}</span>
</code></pre></div>    </div>
    <p>若要注释上面的代码用</p>

    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cm">/**&lt; 注释内容 */</span>
</code></pre></div>    </div>
    <p>如:</p>

    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="cm">/**&lt; 将 a 设为 3 */</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="常见注释标记">常见注释标记</h3>

<p>在注释内容中通过加入一些标记来规范的写注释.</p>

<ol>
  <li>文件信息
    <ul>
      <li><code class="language-plaintext highlighter-rouge">\file</code> 文件名</li>
      <li><code class="language-plaintext highlighter-rouge">\date</code> 日期</li>
      <li><code class="language-plaintext highlighter-rouge">\author</code> 作者</li>
      <li><code class="language-plaintext highlighter-rouge">\brief</code> 文件或函数的摘要</li>
      <li><code class="language-plaintext highlighter-rouge">\todo</code> TODO</li>
    </ul>
  </li>
  <li>函数信息
    <ul>
      <li><code class="language-plaintext highlighter-rouge">\param[int]</code> 输入参数的说明</li>
      <li><code class="language-plaintext highlighter-rouge">\param[out]</code> 输出参数的说明</li>
      <li><code class="language-plaintext highlighter-rouge">\param[in, out]</code> 即输入又输出参数的说明</li>
      <li><code class="language-plaintext highlighter-rouge">\return</code> 返回值说明</li>
      <li><code class="language-plaintext highlighter-rouge">\note</code> 注解, 用来描述函数的流程或注疑事项</li>
      <li><code class="language-plaintext highlighter-rouge">\code</code> 示例代码开始</li>
      <li><code class="language-plaintext highlighter-rouge">\endcode</code> 示例代码结束</li>
    </ul>
  </li>
  <li>特殊标记
    <ul>
      <li><code class="language-plaintext highlighter-rouge">\f[</code> 输入 latex 公式</li>
      <li><code class="language-plaintext highlighter-rouge">\f]</code> 结束 latex 公式</li>
    </ul>
  </li>
</ol>

<h2 id="例子">例子</h2>

<p>这里给出一个例子</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="cm">/**
 * \file test_TetrahedronQuadrature.cpp
 * \author Chunyu Chen
 * \date 2021/09/08
 * \brief TetrahedronQuadrature.h 测试文件
 */</span>
<span class="cp">#include &lt;array&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;math.h&gt;
</span>
<span class="cp">#include "TestMacro.h"
#include "geometry/Point_3.h"
#include "geometry/Vector_3.h"
#include "quadrature/TetrahedronQuadrature.h"
</span>
<span class="k">typedef</span> <span class="n">WHYSC</span><span class="o">::</span><span class="n">GeometryObject</span><span class="o">::</span><span class="n">Point_3</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">Point</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">WHYSC</span><span class="o">::</span><span class="n">Quadrature</span><span class="o">::</span><span class="n">TetrahedronQuadrature</span> <span class="n">TetrahedronQuadrature</span><span class="p">;</span>

<span class="cm">/** 
 * \brief 被积函数
 * \param p 函数的参数
 */</span>
<span class="kt">double</span> <span class="nf">f</span><span class="p">(</span><span class="k">const</span> <span class="n">Point</span> <span class="o">&amp;</span> <span class="n">p</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">return</span> <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="c1">//p[0]*p[1];</span>
<span class="p">}</span>

<span class="cm">/**
 * \brief 四面体类, 即积分区域
 */</span>
<span class="k">struct</span> <span class="nc">Tetrahedron</span>
<span class="p">{</span>
  <span class="n">Point</span> <span class="n">p0</span><span class="p">,</span> <span class="n">p1</span><span class="p">,</span> <span class="n">p2</span><span class="p">,</span> <span class="n">p3</span><span class="p">;</span> <span class="cm">/**&lt; 四面体顶点 */</span>

  <span class="cm">/**
   * \brief 四面体面积
   */</span>
  <span class="kt">double</span> <span class="n">area</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="k">auto</span> <span class="n">v1</span> <span class="o">=</span> <span class="n">p1</span> <span class="o">-</span> <span class="n">p0</span><span class="p">;</span>
    <span class="k">auto</span> <span class="n">v2</span> <span class="o">=</span> <span class="n">p2</span> <span class="o">-</span> <span class="n">p0</span><span class="p">;</span>
    <span class="k">auto</span> <span class="n">v3</span> <span class="o">=</span> <span class="n">p3</span> <span class="o">-</span> <span class="n">p0</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">abs</span><span class="p">(</span><span class="n">dot</span><span class="p">(</span><span class="n">cross</span><span class="p">(</span><span class="n">v1</span><span class="p">,</span> <span class="n">v2</span><span class="p">),</span> <span class="n">v3</span><span class="p">)</span><span class="o">/</span><span class="mi">6</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="cm">/**
 * \brief 积分测试函数
 */</span>
<span class="kt">void</span> <span class="nf">test_integral</span><span class="p">(</span><span class="kt">int</span> <span class="n">p</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="kt">double</span> <span class="n">h</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">Tetrahedron</span> <span class="n">tet</span><span class="p">;</span>
  <span class="n">tet</span><span class="p">.</span><span class="n">p0</span> <span class="o">=</span> <span class="n">Point</span><span class="p">({</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">});</span>
  <span class="n">tet</span><span class="p">.</span><span class="n">p1</span> <span class="o">=</span> <span class="n">Point</span><span class="p">({</span><span class="n">h</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">});</span>
  <span class="n">tet</span><span class="p">.</span><span class="n">p2</span> <span class="o">=</span> <span class="n">Point</span><span class="p">({</span><span class="mi">0</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="mi">0</span><span class="p">});</span>
  <span class="n">tet</span><span class="p">.</span><span class="n">p3</span> <span class="o">=</span> <span class="n">Point</span><span class="p">({</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">h</span><span class="p">});</span>
  
  <span class="n">TetrahedronQuadrature</span> <span class="n">tetQ</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
  <span class="kt">int</span> <span class="n">NQP</span> <span class="o">=</span> <span class="n">tetQ</span><span class="p">.</span><span class="n">number_of_quadrature_points</span><span class="p">();</span>

  <span class="kt">double</span> <span class="n">val</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">NQP</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">auto</span> <span class="n">w</span> <span class="o">=</span> <span class="n">tetQ</span><span class="p">.</span><span class="n">quadrature_weight</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
    <span class="k">auto</span> <span class="o">&amp;</span> <span class="n">qpts</span> <span class="o">=</span> <span class="n">tetQ</span><span class="p">.</span><span class="n">quadrature_point</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
    <span class="k">auto</span> <span class="n">P</span> <span class="o">=</span> <span class="n">qpts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">tet</span><span class="p">.</span><span class="n">p0</span> <span class="o">+</span> <span class="n">qpts</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="n">tet</span><span class="p">.</span><span class="n">p1</span> <span class="o">+</span> <span class="n">qpts</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="n">tet</span><span class="p">.</span><span class="n">p2</span> <span class="o">+</span> <span class="n">qpts</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">*</span><span class="n">tet</span><span class="p">.</span><span class="n">p3</span><span class="p">;</span> 
    <span class="n">val</span> <span class="o">+=</span> <span class="n">f</span><span class="p">(</span><span class="n">P</span><span class="p">)</span><span class="o">*</span><span class="n">w</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="n">val</span> <span class="o">*=</span> <span class="n">tet</span><span class="p">.</span><span class="n">area</span><span class="p">();</span>
  <span class="n">ASSERT_THROW</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">abs</span><span class="p">(</span><span class="n">val</span><span class="o">-</span><span class="n">std</span><span class="o">::</span><span class="n">pow</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span><span class="o">/</span><span class="mf">12.0</span><span class="p">)</span><span class="o">&lt;</span><span class="mf">1e-10</span><span class="p">);</span><span class="cm">/**&lt; 判断积分是否正确 */</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">args</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">q</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
  <span class="kt">double</span> <span class="n">h</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">;</span>
  <span class="k">if</span><span class="p">(</span><span class="n">args</span><span class="o">&gt;</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">args</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">)</span>
     <span class="n">q</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">stoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
  <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">args</span><span class="o">&gt;=</span><span class="mi">3</span><span class="p">)</span>
  <span class="p">{</span>
     <span class="n">q</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">stoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
     <span class="n">h</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">stoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
  <span class="p">}</span>
  <span class="n">test_integral</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">h</span><span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div>

:ET