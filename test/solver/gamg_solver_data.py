import numpy as np
from fealpy.mesh.triangle_mesh import TriangleMesh
from fealpy.functionspace import LagrangeFESpace
from fealpy.fem import (
        BilinearForm, ScalarDiffusionIntegrator,LinearForm,DirichletBC
    )

#初始化：设立模型，得到有限差分方程
class SinCosPDEData:

    def domain(self):
        """
        @brief 得到 PDE 模型的区域
        @return: 表示 PDE 模型的区域的列表
        """
        return np.array([0, 1, 0, 1])

    def solution(self, p):
        """
        @brief 计算 PDE 模型的精确解
        @param p: 自标量 x,y 的数组
        @return: PDE 模型在给定点的精确解
        """
        x = p[..., 0]
        y = p[..., 1]
        pi = np.pi
        val = np.sin(pi * x) * np.sin(pi * y) -np.cos(pi * x) * np.cos(pi * y) + 1
        return val

    def source(self, p):
        """
        @brief: 计算 PDE 模型的原项
        @param p: 自标量 x,y 的数组
        @return: PDE 模型在给定点处的源项
        """
        x = p[..., 0]
        y = p[..., 1]
        pi = np.pi
        val = 2 * pi * pi * (np.sin(pi * x) * np.sin(pi * y) - np.cos(pi * x) * np.cos(pi * y))
        return val
    
    def gradient(self, p):
        x = p[..., 0]
        y = p[..., 1]
        pi = np.pi
        val = np.zeros(p.shape, dtype=np.float64)
        val[..., 0] = pi * np.cos(pi * x) * np.sin(pi * y) + pi * np.sin(pi * x) * np.cos(pi * y)
        val[..., 1] = pi * np.sin(pi * x) * np.cos(pi * y) + pi * np.cos(pi * x) * np.sin(pi * y)
        return val

    def dirichlet(self, p):
        return self.solution(p)

pde = SinCosPDEData()
domain = pde.domain()  

def get_Af(mesh,p):
    space = LagrangeFESpace(mesh,p=p)

    bform = BilinearForm(space)
    bform.add_integrator(ScalarDiffusionIntegrator())
    A_without_apply = bform.assembly()

    lform = LinearForm(space)
    F_without_apply = lform.assembly()

    A1,f = DirichletBC(space,gd = pde.solution).apply(A_without_apply,F_without_apply)
    A = A1.tocoo()
    return A,f
nx_1 = ny_1 = 16
p = 1
mesh_1 = TriangleMesh.from_box(domain,nx_1,ny_1) 
node_1 = mesh_1.entity('node')
A_1,f_1 = get_Af(mesh_1,p)
sol_1 = pde.solution(node_1)

nx_2 = ny_2 = 32
mesh_2 = TriangleMesh.from_box(domain,nx_2,ny_2) 
node_2 = mesh_2.entity('node')
A_2,f_2 = get_Af(mesh_2,p)
sol_2 = pde.solution(node_2)

init_data = [{'theta': 0.025, # 粗化系数
              'csize': 50, # 最粗问题规模
              'ctype': 'C', # 粗化方法
              'itype': 'T', # 插值方法
              'ptype': 'W', # 预条件类型
              'sstep':  2, # 默认光滑步数
              'isolver': 'CG', # 默认迭代解法器
              'maxit':  200,   # 默认迭代最大次数
              'csolver': 'direct', # 默认粗网格解法器
              'rtol': 1e-8,      # 相对误差收敛阈值
              'atol': 1e-8,      # 绝对误差收敛阈值
             }]
test_data = [{'A': A_1 ,
              'sol':#真解
np.array([0.        , 0.01921472, 0.07612047, 0.16853039, 0.29289322, 0.44442977,
 0.61731657, 0.80490968, 1.        , 1.19509032, 1.38268343, 1.55557023,
 1.70710678, 1.83146961, 1.92387953, 1.98078528, 2.        , 0.01921472,
 0.07612047, 0.16853039, 0.29289322, 0.44442977, 0.61731657, 0.80490968,
 1.        , 1.19509032, 1.38268343, 1.55557023, 1.70710678, 1.83146961,
 1.92387953, 1.98078528, 2.        , 1.98078528, 0.07612047, 0.16853039,
 0.29289322, 0.44442977, 0.61731657, 0.80490968, 1.        , 1.19509032,
 1.38268343, 1.55557023, 1.70710678, 1.83146961, 1.92387953, 1.98078528,
 2.        , 1.98078528, 1.92387953, 0.16853039, 0.29289322, 0.44442977,
 0.61731657, 0.80490968, 1.        , 1.19509032, 1.38268343, 1.55557023,
 1.70710678, 1.83146961, 1.92387953, 1.98078528, 2.        , 1.98078528,
 1.92387953, 1.83146961, 0.29289322, 0.44442977, 0.61731657, 0.80490968,
 1.        , 1.19509032, 1.38268343, 1.55557023, 1.70710678, 1.83146961,
 1.92387953, 1.98078528, 2.        , 1.98078528, 1.92387953, 1.83146961,
 1.70710678, 0.44442977, 0.61731657, 0.80490968, 1.        , 1.19509032,
 1.38268343, 1.55557023, 1.70710678, 1.83146961, 1.92387953, 1.98078528,
 2.        , 1.98078528, 1.92387953, 1.83146961, 1.70710678, 1.55557023,
 0.61731657, 0.80490968, 1.        , 1.19509032, 1.38268343, 1.55557023,
 1.70710678, 1.83146961, 1.92387953, 1.98078528, 2.        , 1.98078528,
 1.92387953, 1.83146961, 1.70710678, 1.55557023, 1.38268343, 0.80490968,
 1.        , 1.19509032, 1.38268343, 1.55557023, 1.70710678, 1.83146961,
 1.92387953, 1.98078528, 2.        , 1.98078528, 1.92387953, 1.83146961,
 1.70710678, 1.55557023, 1.38268343, 1.19509032, 1.        , 1.19509032,
 1.38268343, 1.55557023, 1.70710678, 1.83146961, 1.92387953, 1.98078528,
 2.        , 1.98078528, 1.92387953, 1.83146961, 1.70710678, 1.55557023,
 1.38268343, 1.19509032, 1.        , 1.19509032, 1.38268343, 1.55557023,
 1.70710678, 1.83146961, 1.92387953, 1.98078528, 2.        , 1.98078528,
 1.92387953, 1.83146961, 1.70710678, 1.55557023, 1.38268343, 1.19509032,
 1.        , 0.80490968, 1.38268343, 1.55557023, 1.70710678, 1.83146961,
 1.92387953, 1.98078528, 2.        , 1.98078528, 1.92387953, 1.83146961,
 1.70710678, 1.55557023, 1.38268343, 1.19509032, 1.        , 0.80490968,
 0.61731657, 1.55557023, 1.70710678, 1.83146961, 1.92387953, 1.98078528,
 2.        , 1.98078528, 1.92387953, 1.83146961, 1.70710678, 1.55557023,
 1.38268343, 1.19509032, 1.        , 0.80490968, 0.61731657, 0.44442977,
 1.70710678, 1.83146961, 1.92387953, 1.98078528, 2.        , 1.98078528,
 1.92387953, 1.83146961, 1.70710678, 1.55557023, 1.38268343, 1.19509032,
 1.        , 0.80490968, 0.61731657, 0.44442977, 0.29289322, 1.83146961,
 1.92387953, 1.98078528, 2.        , 1.98078528, 1.92387953, 1.83146961,
 1.70710678, 1.55557023, 1.38268343, 1.19509032, 1.        , 0.80490968,
 0.61731657, 0.44442977, 0.29289322, 0.16853039, 1.92387953, 1.98078528,
 2.        , 1.98078528, 1.92387953, 1.83146961, 1.70710678, 1.55557023,
 1.38268343, 1.19509032, 1.        , 0.80490968, 0.61731657, 0.44442977,
 0.29289322, 0.16853039, 0.07612047, 1.98078528, 2.        , 1.98078528,
 1.92387953, 1.83146961, 1.70710678, 1.55557023, 1.38268343, 1.19509032,
 1.        , 0.80490968, 0.61731657, 0.44442977, 0.29289322, 0.16853039,
 0.07612047, 0.01921472, 2.        , 1.98078528, 1.92387953, 1.83146961,
 1.70710678, 1.55557023, 1.38268343, 1.19509032, 1.        , 0.80490968,
 0.61731657, 0.44442977, 0.29289322, 0.16853039, 0.07612047, 0.01921472,
 0.        ],dtype=np.float64),
            'f' : #最初右端项，用来检验残差
np.array([0.        , 0.01921472, 0.07612047, 0.16853039, 0.29289322, 0.44442977,
 0.61731657, 0.80490968, 1.        , 1.19509032, 1.38268343, 1.55557023,
 1.70710678, 1.83146961, 1.92387953, 1.98078528, 2.        , 0.01921472,
 0.03842944, 0.07612047, 0.16853039, 0.29289322, 0.44442977, 0.61731657,
 0.80490968, 1.        , 1.19509032, 1.38268343, 1.55557023, 1.70710678,
 1.83146961, 1.92387953, 3.96157056, 1.98078528, 0.07612047, 0.07612047,
 0.        , 0.        , 0.        , 0.        , 0.        , 0.        ,
 0.        , 0.        , 0.        , 0.        , 0.        , 0.        ,
 0.        , 1.92387953, 1.92387953, 0.16853039, 0.16853039, 0.        ,
 0.        , 0.        , 0.        , 0.        , 0.        , 0.        ,
 0.        , 0.        , 0.        , 0.        , 0.        , 0.        ,
 1.83146961, 1.83146961, 0.29289322, 0.29289322, 0.        , 0.        ,
 0.        , 0.        , 0.        , 0.        , 0.        , 0.        ,
 0.        , 0.        , 0.        , 0.        , 0.        , 1.70710678,
 1.70710678, 0.44442977, 0.44442977, 0.        , 0.        , 0.        ,
 0.        , 0.        , 0.        , 0.        , 0.        , 0.        ,
 0.        , 0.        , 0.        , 0.        , 1.55557023, 1.55557023,
 0.61731657, 0.61731657, 0.        , 0.        , 0.        , 0.        ,
 0.        , 0.        , 0.        , 0.        , 0.        , 0.        ,
 0.        , 0.        , 0.        , 1.38268343, 1.38268343, 0.80490968,
 0.80490968, 0.        , 0.        , 0.        , 0.        , 0.        ,
 0.        , 0.        , 0.        , 0.        , 0.        , 0.        ,
 0.        , 0.        , 1.19509032, 1.19509032, 1.        , 1.        ,
 0.        , 0.        , 0.        , 0.        , 0.        , 0.        ,
 0.        , 0.        , 0.        , 0.        , 0.        , 0.        ,
 0.        , 1.        , 1.        , 1.19509032, 1.19509032, 0.        ,
 0.        , 0.        , 0.        , 0.        , 0.        , 0.        ,
 0.        , 0.        , 0.        , 0.        , 0.        , 0.        ,
 0.80490968, 0.80490968, 1.38268343, 1.38268343, 0.        , 0.        ,
 0.        , 0.        , 0.        , 0.        , 0.        , 0.        ,
 0.        , 0.        , 0.        , 0.        , 0.        , 0.61731657,
 0.61731657, 1.55557023, 1.55557023, 0.        , 0.        , 0.        ,
 0.        , 0.        , 0.        , 0.        , 0.        , 0.        ,
 0.        , 0.        , 0.        , 0.        , 0.44442977, 0.44442977,
 1.70710678, 1.70710678, 0.        , 0.        , 0.        , 0.        ,
 0.        , 0.        , 0.        , 0.        , 0.        , 0.        ,
 0.        , 0.        , 0.        , 0.29289322, 0.29289322, 1.83146961,
 1.83146961, 0.        , 0.        , 0.        , 0.        , 0.        ,
 0.        , 0.        , 0.        , 0.        , 0.        , 0.        ,
 0.        , 0.        , 0.16853039, 0.16853039, 1.92387953, 1.92387953,
 0.        , 0.        , 0.        , 0.        , 0.        , 0.        ,
 0.        , 0.        , 0.        , 0.        , 0.        , 0.        ,
 0.        , 0.07612047, 0.07612047, 1.98078528, 3.96157056, 1.92387953,
 1.83146961, 1.70710678, 1.55557023, 1.38268343, 1.19509032, 1.        ,
 0.80490968, 0.61731657, 0.44442977, 0.29289322, 0.16853039, 0.07612047,
 0.03842944, 0.01921472, 2.        , 1.98078528, 1.92387953, 1.83146961,
 1.70710678, 1.55557023, 1.38268343, 1.19509032, 1.        , 0.80490968,
 0.61731657, 0.44442977, 0.29289322, 0.16853039, 0.07612047, 0.01921472,
 0.        ],dtype=np.float64),
              'hx':(domain[1]-domain[0])/nx_1,
              'hy':(domain[3]-domain[2])/ny_1,
              'nx':nx_1,
              'ny':ny_1,
},

    {          'A':A_2,
              'sol':sol_2,
              'f':f_2,
              'hx':(domain[1]-domain[0])/nx_2,
              'hy':(domain[3]-domain[2])/ny_2,
               'nx':nx_2,
              'ny':ny_2,
            }]

# test_data = [{'A':A,
#               'sol':pde.solution('node')
#               'f':f,
#               'hx':domain[1]-domain[0]/nx,
#               'hy':domain[3]-domain[2]/ny,
#             }]
