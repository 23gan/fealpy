#!/usr/bin/env python3
# 
import sys
import numpy as np
import scipy.io as sio
from scipy.sparse import coo_matrix, csr_matrix
from scipy.sparse.csgraph import minimum_spanning_tree

from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

from fealpy.mesh import TriangleMesh
from fealpy.mesh import HalfEdgeMesh2d
from fealpy.geometry import SphereSurface
from fealpy.writer import MeshWriter

class SurfaceHalfEdgemesh2dTest():

    def __init__(self):
        pass

    def read_surface_mesh(self, fname, plot=False):

        data = sio.loadmat(fname)
        node = data['node']
        cell = data['elem'] - 1
        mesh = TriangleMesh(node, cell)

        surface = SphereSurface()
        mesh = surface.init_mesh()
        mesh.uniform_refine(n=3,surface=surface)


        edge = mesh.entity('edge')
        edge2cell = mesh.ds.edge_to_cell()

        NE = mesh.number_of_edges()
        NC = mesh.number_of_cells()
        val = np.ones((NE,), dtype=np.int)

        cell2cell = coo_matrix(
                (val, (edge2cell[:, 0], edge2cell[:, 1])),
                shape=(NC, NC))
        cell2cell += coo_matrix(
                (val, (edge2cell[:, 1], edge2cell[:, 0])),
                shape=(NC, NC))
        cell2cell = cell2cell.tocsr()

        mtree = minimum_spanning_tree(cell2cell)
        
        mtree = mtree + mtree.T

        flag = np.asarray(mtree[edge2cell[:, 0], edge2cell[:, 1]]).reshape(-1).astype(np.int)
        index, = np.nonzero(flag == 0) 

        writer = MeshWriter(mesh)
        writer.write(fname='test0.vtu')

        writer = MeshWriter(mesh, etype='edge', index=index)
        writer.write(fname='test1.vtu')



test = SurfaceHalfEdgemesh2dTest()

if sys.argv[1] == 'read':
    fname = sys.argv[2] 
    test.read_surface_mesh(fname, plot=False)
